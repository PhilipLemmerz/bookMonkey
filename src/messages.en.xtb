<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE translationbundle [
<!ELEMENT translationbundle (translation)*>
<!ATTLIST translationbundle lang CDATA #REQUIRED>

<!ELEMENT translation (#PCDATA|ph)*>
<!ATTLIST translation id CDATA #REQUIRED>
<!ATTLIST translation desc CDATA #IMPLIED>
<!ATTLIST translation meaning CDATA #IMPLIED>
<!ATTLIST translation xml:space (default|preserve) "default">

<!ELEMENT ph (#PCDATA|ex)*>
<!ATTLIST ph name CDATA #REQUIRED>

<!ELEMENT ex (#PCDATA)>
]>
<translationbundle lang="en">
  <translation id="form:headline"> Add New Book - Template Driven </translation>
  <translation id="form:booktitle">book title</translation>
  <translation id="1536419805421614141" desc="form:booktitleplaceholder">Learn Angular</translation>
  <translation id="form:subtitle">subtitle</translation>
  <translation id="form:subtitleplaceholder">the practice manual</translation>
  <translation id="form:author">author</translation>
  <translation id="form:authorplaceholder">John Doe</translation>
  <translation id="form:isbn">Isbn code</translation>
  <translation id="form:isbnplaceholder">123456789</translation>
  <translation id="form:infoIsbn"> Please enter 13 digits </translation>
  <translation id="form:published">Release Date</translation>
  <translation id="form:bublishedplaceholder">02/22/1997</translation>
  <translation id="form:rating">evaluation</translation>
  <translation id="form:ratingplaceholder">3</translation>
  <translation id="form:addCoverImg"> Add cover image:</translation>
  <translation id="form:imgurl">URL (image link)</translation>
  <translation id="form:imgurlplaceholder">https://learnangular/titleimage.com</translation>
  <translation id="form:imgTitle">caption </translation>
  <translation id="form:imgTitleplaceholder">Cover image Learn Angular</translation>
  <translation id="form:description">book description</translation>
  <translation id="form:buttonAdd"> Add book </translation>
  <translation id="form:unvalidEntry">Invalid inputs</translation>
  <translation id="form:formNotValid">The form was not filled out correctly</translation>
  <translation id="formreactive:headline"> Add book - Reactive approach </translation>
  <translation id="formreactive:BookTitle">book title</translation>
  <translation id="formreactive:BookTitleplaceholder">Learn Angular</translation>
  <translation id="formreactive:subtitle">subtitle</translation>
  <translation id="formreactive:subtitleplaceholder">the practice manual</translation>
  <translation id="formreactive:auhtor">author</translation>
  <translation id="formreactive:authorplaceholder">John Doe</translation>
  <translation id="formreactive:isbn">Isbn code</translation>
  <translation id="formreactive:isbnplaceholder">123456789</translation>
  <translation id="formreactive:published">Release Date</translation>
  <translation id="formreactive:rating">evaluation</translation>
  <translation id="formreactive:coverIngTitle"> Add cover images:</translation>
  <translation id="formreactive:imgurl">URL (image link)</translation>
  <translation id="formreactive:imgurlplaceholder">https://learnangular/titleimage.com</translation>
  <translation id="formreactive:imgtitle">caption </translation>
  <translation id="formreactive:placeholder">Cover image Learn Angular</translation>
  <translation id="formreactive:description">book description</translation>
  <translation id="formreactive:buttonAdd"> Add book </translation>
  <translation id="formreactive:unvalidForm">Invalid inputs</translation>
  <translation id="formreactive:unvalidFormparagraph">The form was not filled out correctly</translation>
  <translation id="8892530364318078016"> please enter a 13-digit ISBN</translation>
  <translation id="5926945193203117371">the entered ISBN has the wrong format</translation>
  <translation id="4610262022236579380">The entered isbn already exists</translation>
  <translation id="8667105469228116883">an error has occurred </translation>
  <translation id="8853423797825937936">Warning: Sensitive Area - Please create and edit books diligently</translation>
  <translation id="9195791428126982411">Are you sure you want to leave this page? - Your entries will be lost</translation>
  <translation id="nav:books"> Books </translation>
  <translation id="nav:admin"> admin </translation>
  <translation id="nav:templateForm">Create book - template-driven</translation>
  <translation id="nav:reactiveForm"> Create book - reactive </translation>
  <translation id="nav:learn">learning </translation>
  <translation id="nav:typeScript">typeScript</translation>
  <translation id="nav:services">services</translation>
  <translation id="nav:http">http</translation>
  <translation id="nav:observables"> observables</translation>
  <translation id="nav:forms"> forms</translation>
  <translation id="nav:pipes"> pipes </translation>
  <translation id="nav:directives"> directives</translation>
  <translation id="Home:headline"> Home</translation>
  <translation id="home:button">View the book list <ph name="START_ITALIC_TEXT"/><ph name="CLOSE_ITALIC_TEXT"/></translation>
  <translation id="learnDirectives:headline"> directives </translation>
  <translation id="learnDirectives:subtitle"> get other bindings in directive </translation>
  <translation id="learnDirectives:firstp"> Our directive sits on this p-element and accesses a variable from the component </translation>
  <translation id="learnDirectives:hostbindingtitle"> @HostBinding </translation>
  <translation id="learnDirectives:hostbindingdescription"> Properties e.g. set classes on the host element </translation>
  <translation id="learnDirectives:hostbindingtest"> As soon as the class has been set active via @HostBinding, the text turns red </translation>
  <translation id="learnDirectives:elementreftitle"> item ref </translation>
  <translation id="learnDirectives:elementrefparagraph"> Modify DOM elements natively and directly </translation>
  <translation id="learnDirectives:directivegreen"> directive makes the text green after 3 seconds by ElementRef </translation>
  <translation id="learnDirectives:hostlistener"> @HostListener </translation>
  <translation id="learnDirectives:hostlistenerparagraph"> Whenever an event occurs on the host element, e.g. click, the directive executes the stored function</translation>
  <translation id="learnDirectives:hostlistenersecondparagraph"> When you click the button, the button text turns blue and the background turns yellow -&gt; style is set in the directive for the host element </translation>
  <translation id="learnDirectives:buttonone"> click me </translation>
  <translation id="learnDirectives:complexdirective"> Complex directive example </translation>
  <translation id="learnDirectives:complexdirectivedescription"> If we move the mouse over the square, it turns green</translation>
  <translation id="learnForms:headline"> Forms - Template Driven </translation>
  <translation id="learnForms:subtitle"> Basic structure &amp; message depending on the status </translation>
  <translation id="learnForms:lastname">last name</translation>
  <translation id="learnForms:firsthint"> The input &apos;lastname&apos; is untouched </translation>
  <translation id="learnForms:passwordplaceholder">password</translation>
  <translation id="learnForms:hinttwo"> Please enter a password with at least 8 characters and a number </translation>
  <translation id="learnForms:sendone"> send </translation>
  <translation id="learnforms:reactiveTitle"> Reactive Forms </translation>
  <translation id="learnForms:reactiveName">User name</translation>
  <translation id="learnForms:reactiveHintOne"> Please enter at least 5 characters </translation>
  <translation id="learnForms:reactivePassword">password</translation>
  <translation id="learnForms:reactiveNameInput"> Your name</translation>
  <translation id="learnForms:reactiveFirstName">First name</translation>
  <translation id="learnForms:reactiveLastname">last name</translation>
  <translation id="learnForms:reactiveemail"> your email addresses</translation>
  <translation id="learnForms:reactiveMailInput">mail address</translation>
  <translation id="learnForms:reactivePlZValidator"> Own zip code validator </translation>
  <translation id="learnForms:reactiveentryPassword"> Enter password</translation>
  <translation id="learnForms:reactivePasswordInputValidator">password</translation>
  <translation id="learnForms:reactivePasswordValidatorSecond">Repeat password</translation>
  <translation id="learnForms:reactivesend"> send </translation>
  <translation id="learnForms:reactiveSetValueTitle"> Set all values with setValue()</translation>
  <translation id="learnForms:reativesetAllValues"> set all values</translation>
  <translation id="learnForms:reactivepatchOneValue"> set a value</translation>
  <translation id="learnhttp:headline"> HTTP client</translation>
  <translation id="learnhttp:subtitle"> Integrate the http client only once in the entire application - i.e. outsource it to a service</translation>
  <translation id="learnhttp:callBackValues"> return values </translation>
  <translation id="learnhttp:standardbody"> by default, the HTTP request only returns the body</translation>
  <translation id="learnhttp:typeResponse"> The variable we want to fill with the answer can have a simple type : string, :number, :Book[]. Depending on what the server just sends</translation>
  <translation id="learnhttp:completeResponse"> Read out complete response with headers and all</translation>
  <translation id="learnhttp:sendforCompleteResponse"> If we don&apos;t just want the body but the whole response, we must indicate this when sending the request by adding: observe: &apos;Response&apos; (p.193) </translation>
  <translation id="learnhttp:typetheSame"> But then we always have the type as return: HttpResponse</translation>
  <translation id="learnhttp:paramter"> Pass parameters with the request</translation>
  <translation id="learnhttp:parameterParagraph"> Often you want to give parameters to get certain answers, you ask e.g.: exmaple.com/api/items?filter=search term1</translation>
  <translation id="learnhttp:paramsObject"> This is solved by creating a params object containing a formObject. this is then given to the request </translation>
  <translation id="learnhttp:setParameter"> We can change parameters using the method set(&apos;paramter&apos;, &apos;newValue&apos;) and add them using append(&apos;filter&apos;, &apos;newParamter&apos;). </translation>
  <translation id="learnhttp:wichPage"> p. 195</translation>
  <translation id="learnhttp:callbackValueJson"> Return value no JSON</translation>
  <translation id="learnhttp:standardValue"> By default we expect a JSON as return </translation>
  <translation id="learnhttp:emptyrespnse"> If we don&apos;t get JSON OR NO VALUE AT ALL we have to specify the type manually with: responseType: &apos;text&apos; or &apos;blob&apos;</translation>
  <translation id="learnobservables:headline"> observables </translation>
  <translation id="learnobservables:createFunctions"> CreateFunctions</translation>
  <translation id="learnobservables:createFunctionsFirst">of creates an observable from single values: const $obs = of(1,2,3) </translation>
  <translation id="learnobservables:createFunctionFrom">from creates one from an array const $obs = from(myArray)</translation>
  <translation id="learnobservables:createFunctionTimer">imer(500) creates a new value every 500ms // ---1---2---3---4---5....</translation>
  <translation id="learnobservables:createFunctionTimerSecond">timer(500, 0) Starts at 0ms and generates the value and then every 500ms // 1---2---3---4---5...</translation>
  <translation id="learnobservables:sharedOperator"> Shared operator </translation>
  <translation id="learnobservables:sharedText"> We executed a request from the server and distributed it to 2 subscribers using Shared without executing a request with the two subscribers </translation>
  <translation id="learnobservables:subject"> Subject </translation>
  <translation id="learnobservables:subjectText"> A subject is a self-created observable that we can subscribe to if the data in the subject changes, the values of the variable to which the subscription was assigned also change </translation>
  <translation id="learnobservables:behaviourSubject"> Behavior Subject</translation>
  <translation id="learnobservables:behaviourSubjecttext">already has a starting value</translation>
  <translation id="learnservices:headline"> services </translation>
  <translation id="learnservices:useprovidedin"> providedIn</translation>
  <translation id="learnservices:pone"> So that Angular recognizes whether a service is required or not, we use the providedIn tag instead of the providers array</translation>
  <translation id="learnservices:ptwo">This reduces the size of our bundle, since services that are not required are not taken into account</translation>
  <translation id="learnservices:pthree"> root: an instance of the service that is shared</translation>
  <translation id="learnservices:pfour"> any: each time the service is injected into a component, it gets a new instance of the service </translation>
  <translation id="learnts:headline"> TypeScript </translation>
  <translation id="learnts:subtitle"> learnings of the TypeScript chapter </translation>
  <translation id="learnts:unknown"> unknown &amp; any</translation>
  <translation id="learnts:unkowntext"> Type :unkown can only be assigned to another variable after a type check</translation>
  <translation id="learnts:methodtypes"> method types</translation>
  <translation id="learnts:methodtypestext"> Make sure methods return the desired type </translation>
  <translation id="learnts:extends"> Keyword: extends </translation>
  <translation id="learnts:extendstext"> Inheriting properties and methods from other classes </translation>
  <translation id="learnts:lamda"> lambda expressions </translation>
  <translation id="learnts:lamdatext"> we can also use Arrow notation to return results </translation>
  <translation id="learnts:spread"> spread operator </translation>
  <translation id="learnts:spreadtext"> With the spread operator we create a copy of an object &amp; transfer all properties of the old object (we can then overwrite individual ones if necessary) </translation>
  <translation id="learnts:oldObject">old object</translation>
  <translation id="learnts:copyofObject">new object with spread &amp; changed year</translation>
  <translation id="learnts:uniontypes"> Specify 2 types - Union Types </translation>
  <translation id="learnts:variable"> variable : string | number = &apos;may be of type string or number&apos; </translation>
  <translation id="learnts:bindings"> property bindings </translation>
  <translation id="learnts:bindingone"> bind pure strings as attribute =&gt; src=&quot;https://bild.de&quot;</translation>
  <translation id="learnts:bindingtwo"> Bind variables or expressions as property =&gt; [src] = &quot;picUrl&quot;</translation>
  <translation id="learnts:ngClass"> ngClass &amp; ngStyle syntax</translation>
  <translation id="learnts:ngClasstwo"> with ngClass we can bind MULTIPLE CLASSES in DEPENDENCE of variable states</translation>
  <translation id="learnts:ngClassthree"> see below - the variable hasError is false and the variable isActive is true</translation>
  <translation id="learnts:dynamicclass"> Classes are set dynamically depending on the variable state of isActive and hasError</translation>
  <translation id="learnts:buttonchangeclass"> swap classes</translation>
  <translation id="learnts:ngstyle"> with ngSyle this works the same way</translation>
  <translation id="learnts:morestyles"> multiple styles with ngStyle </translation>
  <translation id="learnts:changename"> @Input name change </translation>
  <translation id="learnts:outputs"> @Input(&apos;oldName&apos;) newName : string;</translation>
  <translation id="learnts:myowntype"> Develop your own types</translation>
  <translation id="learnts:onoff"> type ourType = &apos;on&apos; | &apos;off&apos; </translation>
  <translation id="learnts:onofftext"> The type ourType should now only accept the strings &apos;on&apos; or &apos;of&apos;</translation>
  <translation id="learnts:becarefulwithowntypes"> Warning: the types are defined using the @Component Decorator </translation>
  <translation id="bookDetail:author"> authors</translation>
  <translation id="bookDetail:isbn"> ISBN </translation>
  <translation id="bookDetail:published"> Appeared: </translation>
  <translation id="bookDetail:rating">evaluation</translation>
  <translation id="bookDetail:description">description</translation>
  <translation id="bookDetail:Buttonback"> back </translation>
  <translation id="bookDetail:ButtonEdit">to edit</translation>
  <translation id="bookDetail:ButtonDelete">delete book</translation>
  <translation id="bookDetail:loading">Loading</translation>
  <translation id="7494421066648407306">Are you sure you want to delete this book?</translation>
  <translation id="BookList:noBooksFound"> No books were found</translation>
  <translation id="BookList:loading">Loading</translation>
  <translation id="learnpipes:headline"> Pipes &amp; directives </translation>
  <translation id="learnpipes:pipesHeadline"> Pipes: </translation>
  <translation id="learnpipes:datePipe"> date pipes</translation>
  <translation id="learnpipes:datePipeText">Normal format of a Date object</translation>
  <translation id="learnpipes:tableName">Surname</translation>
  <translation id="learnpipes:tableResult">Result</translation>
  <translation id="learnpipes:anothername">Surname</translation>
  <translation id="learnpipes:anotherresult">Result value= 3.14159 </translation>
  <translation id="learnpipes:namesecond">Surname</translation>
  <translation id="learnpipes:namheadline">Result</translation>
  <translation id="learnpipes:namethirdone"> Also goes to arrays : [&apos;Ferdinant&apos;, &apos;Walter&apos;, &apos;Peter&apos;, &apos;Frank&apos;] | slice :0:2 </translation>
  <translation id="learnpipes:keyValuePipe">KeyValuePipe | key value </translation>
  <translation id="learnpipes:keyValuePipetext"> Convert an object to an array Object: </translation>
  <translation id="learnpipes:jsonpipe"> json pipe | json - make object visible! </translation>
  <translation id="learnpipes:jsonpipetext"> without | Output json book object</translation>
  <translation id="learnpipes:widthJsond"> with | json </translation>
  <translation id="learnpipes:asyncPipe"> asyncpipe </translation>
  <translation id="learnpipes:asyncpipeText">Our BehaviorSubject first has the value &apos;hello&apos; then after a second &apos;world&apos; </translation>
  <translation id="learnpipes:printValues"> Best practice to level observable values in the template</translation>
  <translation id="learnpipes:asyncautomaticsubscibe"> |async automatically subscribes</translation>
  <translation id="learnpipes:becareful"> be careful with http issues because a new request is executed with each use</translation>
  <translation id="learnpipes:bettershare"> -&gt; better use with share() or shareReplay() and pipe to the shared observable that doesn&apos;t make a request </translation>
  <translation id="learnpipes:myownpipe"> Create your own pipe </translation>
  <translation id="learnpipes:multiplicationpipe">Our pipe multiplies the seed value by the entered number </translation>
  <translation id="learnpipes:startvalue"> Starting value: 5</translation>
  <translation id="learnpipes:buttoncalculate"> calculate </translation>
  <translation id="error">noisbn: please enter a 13-digit ISBN</translation>
  <translation id="guardCanActivate">Atention:Warning: sensitive area - please create and edit books conscientiously</translation>
  <translation id="canDeactivate">leaveConfirm:Are you sure you want to leave this page? - Your entries will be lost</translation>
</translationbundle>
